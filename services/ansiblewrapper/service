#!/bin/bash

# Ansible wrapper
# Parameters expected from Cloud Center:
# - GIT_URL
# - GIT_BRANCH
# - PLAYBOOK_FILENAME



exec > >(tee -a /usr/local/osmosix/logs/service.log) 2>&1

OSSVC_HOME=/usr/local/osmosix/service

. /usr/local/osmosix/etc/.osmosix.sh
. /usr/local/osmosix/etc/userenv
. $OSSVC_HOME/utils/cfgutil.sh
# . $OSSVC_HOME/utils/nosqlutil.sh
. $OSSVC_HOME/utils/install_util.sh
. $OSSVC_HOME/utils/os_info_util.sh
# . ./docker.sh

cmd=$1
SVCNAME="ansible-wrapper"
BASE_DIR="/tmp/ansible-wrapper"
GIT_DIR="${BASE_DIR}/git"

if [[ -z "${GIT_BRANCH}" ]]
then
    GIT_BRANCH="master"
fi

log() {
	if [ -n "$USE_SERVICE_LOG"  -a "$USE_SERVICE_LOG" == "true" ];then
	    echo "$*"
	else
		logger -t "OSMOSIX" "[$SVCNAME] $*"
	fi
}

installPrerequisites() {
    if [[ $os == "CentOS" || $os == "RHEL" ]]
    then
        yum install -y ansible git
    elif [[ $os == "Ubuntu" ]]
    then
        apt-get install -y ansible git
    else
        echo "Unknown OS version, not installing prerequisites"
    fi
}

runAnsible() {
    PHASE=$1
    UPDATE=$2

    if [[ -z "${PHASE}" ]]
    then
        echo "runAnsible called without phase specified"
        exit 1
    fi

    if [[ ! -d "${GIT_DIR}" && ! -z "${GIT_URL}" && ! -z "${GIT_BRANCH}" ]]
    then
        (
            mkdir -p "${GIT_DIR}"
            cd "${GIT_DIR}"
            git clone "${GIT_URL}" .
            git checkout "${GIT_BRANCH}"
        )
    else
        echo "Not cloning repository - GIT_DIR already exists or GIT_URL/GIT_BRANCH are not set. "
    fi

    if [[ ! -z "${UPDATE}" ]]
    then
        echo "updating ansible files via git"
        (
            cd "${GIT_DIR}"
            git pull
        )
    fi

    if [[ -z "${PLAYBOOK_FILENAME}" ]]
    then
        echo "PLAYBOOK FILENAME not defined yet, skipping ansible"
    else
        echo "running ansible"
        (
            cd "${GIT_DIR}"
            # convert the CloudCenter environment variables into a YAML file for Ansible
            sed -e 's/=/: /' -e 's/^export //' /usr/local/cliqr/etc/userenv > /tmp/userenv.yaml

            ansible-playbook --connection=local -i 127.0.0.1 --extra-vars="@/tmp/userenv.yaml" --tags="${PHASE}" "${PLAYBOOK_FILENAME}"
        )
    fi
}

runScripts(){
    case $cmd in
        install)
            log "[INSTALL] ${SVCNAME}"
            installPrerequisites
            runAnsible install
            ;;
        deploy)
            log "[DEPLOY] ${SVCNAME}"
            runAnsible deploy 
            ;;
        configure)
            log "[CONFIGURE] ${SVCNAME}"
            runAnsible configure true
            ;;
        start)
            log "[START] ${SVCNAME}"
            runAnsible start
            ;;
        stop)
            log "[STOP] ${SVCNAME}"
            runAnsible stop
            ;;
        restart)
            log "[RESTART] ${SVCNAME}"
            runAnsible restart
            ;;
        cleanup)
            log "[CLEANUP] ${SVCNAME}"
            runAnsible cleanup
            ;;
        reload)
            log "[RELOAD] ${SVCNAME}"
            runAnsible reload
            ;;
        upgrade)
            log "[UPGRADE] Upgrading $SVCNAME"
            runAnsible upgrade
            ;;
        *)
            log "[ERROR] unknown command"
            exit 127
            ;;
    esac
}


runScripts
